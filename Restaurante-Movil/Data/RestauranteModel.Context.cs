//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;
using System.Data.Entity.Infrastructure;
using System.Data.Entity;

namespace Data
{
    public partial class ProgAvanzada_ArqSoftware_RestauranteEntities : ObjectContext
    {
        public const string ConnectionString = "name=ProgAvanzada_ArqSoftware_RestauranteEntities";
        public const string ContainerName = "ProgAvanzada_ArqSoftware_RestauranteEntities";
    
        #region Constructors
    
        public ProgAvanzada_ArqSoftware_RestauranteEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = false;
    		this.ContextOptions.ProxyCreationEnabled = false;
        }
    
        public ProgAvanzada_ArqSoftware_RestauranteEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = false;
    		this.ContextOptions.ProxyCreationEnabled = false;
        }
    
        public ProgAvanzada_ArqSoftware_RestauranteEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = false;
    		this.ContextOptions.ProxyCreationEnabled = false;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<Empleado> Empleadoes
        {
            get { return _empleadoes  ?? (_empleadoes = CreateObjectSet<Empleado>("Empleadoes")); }
        }
        private ObjectSet<Empleado> _empleadoes;
    
        public ObjectSet<Entidad> Entidads
        {
            get { return _entidads  ?? (_entidads = CreateObjectSet<Entidad>("Entidads")); }
        }
        private ObjectSet<Entidad> _entidads;
    
        public ObjectSet<Ingrediente> Ingredientes
        {
            get { return _ingredientes  ?? (_ingredientes = CreateObjectSet<Ingrediente>("Ingredientes")); }
        }
        private ObjectSet<Ingrediente> _ingredientes;
    
        public ObjectSet<Proveedor> Proveedors
        {
            get { return _proveedors  ?? (_proveedors = CreateObjectSet<Proveedor>("Proveedors")); }
        }
        private ObjectSet<Proveedor> _proveedors;

        #endregion

        #region Stored Procedures

        public static int Insert_Empleado(string nombre, string apellido, Nullable<short> puesto, Nullable<decimal> sueldo, Nullable<System.DateTime> contratacion, Nullable<bool> activo)
        {
            var BDD = new ProgAvanzada_ArqSoftware_RestauranteEntities2();
            return BDD.Insert_Empleado(nombre, apellido, puesto, sueldo, contratacion, activo);
        }

        public static int Insert_Ingrediente(string nombre, Nullable<short> tipo, Nullable<decimal> cantidad)
        {
            var BDD = new ProgAvanzada_ArqSoftware_RestauranteEntities2();
            return BDD.Insert_Ingrediente(nombre, tipo, cantidad);
        }

        public static int Insert_Proveedor(string nombre, Nullable<long> telefono, Nullable<decimal> deuda)
        {
            var BDD = new ProgAvanzada_ArqSoftware_RestauranteEntities2();
            return BDD.Insert_Proveedor(nombre, telefono, deuda);
        }

        #endregion


        private class ProgAvanzada_ArqSoftware_RestauranteEntities2 : DbContext
        {
            public ProgAvanzada_ArqSoftware_RestauranteEntities2()
                : base("name=ProgAvanzada_ArqSoftware_RestauranteEntities")
            {
            }

            protected override void OnModelCreating(DbModelBuilder modelBuilder)
            {
                throw new UnintentionalCodeFirstException();
            }

            public DbSet<Empleado> Empleadoes { get; set; }
            public DbSet<Entidad> Entidads { get; set; }
            public DbSet<Ingrediente> Ingredientes { get; set; }
            public DbSet<Proveedor> Proveedors { get; set; }

            public virtual int Insert_Empleado(string nombre, string apellido, Nullable<short> puesto, Nullable<decimal> sueldo, Nullable<System.DateTime> contratacion, Nullable<bool> activo)
            {
                var nombreParameter = nombre != null ?
                    new ObjectParameter("Nombre", nombre) :
                    new ObjectParameter("Nombre", typeof(string));

                var apellidoParameter = apellido != null ?
                    new ObjectParameter("Apellido", apellido) :
                    new ObjectParameter("Apellido", typeof(string));

                var puestoParameter = puesto.HasValue ?
                    new ObjectParameter("Puesto", puesto) :
                    new ObjectParameter("Puesto", typeof(short));

                var sueldoParameter = sueldo.HasValue ?
                    new ObjectParameter("Sueldo", sueldo) :
                    new ObjectParameter("Sueldo", typeof(decimal));

                var contratacionParameter = contratacion.HasValue ?
                    new ObjectParameter("Contratacion", contratacion) :
                    new ObjectParameter("Contratacion", typeof(System.DateTime));

                var activoParameter = activo.HasValue ?
                    new ObjectParameter("Activo", activo) :
                    new ObjectParameter("Activo", typeof(bool));

                return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Empleado", nombreParameter, apellidoParameter, puestoParameter, sueldoParameter, contratacionParameter, activoParameter);
            }

            public virtual int Insert_Ingrediente(string nombre, Nullable<short> tipo, Nullable<decimal> cantidad)
            {
                var nombreParameter = nombre != null ?
                    new ObjectParameter("Nombre", nombre) :
                    new ObjectParameter("Nombre", typeof(string));

                var tipoParameter = tipo.HasValue ?
                    new ObjectParameter("Tipo", tipo) :
                    new ObjectParameter("Tipo", typeof(short));

                var cantidadParameter = cantidad.HasValue ?
                    new ObjectParameter("Cantidad", cantidad) :
                    new ObjectParameter("Cantidad", typeof(decimal));

                return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Ingrediente", nombreParameter, tipoParameter, cantidadParameter);
            }

            public virtual int Insert_Proveedor(string nombre, Nullable<long> telefono, Nullable<decimal> deuda)
            {
                var nombreParameter = nombre != null ?
                    new ObjectParameter("Nombre", nombre) :
                    new ObjectParameter("Nombre", typeof(string));

                var telefonoParameter = telefono.HasValue ?
                    new ObjectParameter("Telefono", telefono) :
                    new ObjectParameter("Telefono", typeof(long));

                var deudaParameter = deuda.HasValue ?
                    new ObjectParameter("Deuda", deuda) :
                    new ObjectParameter("Deuda", typeof(decimal));

                return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Proveedor", nombreParameter, telefonoParameter, deudaParameter);
            }

        }

    }
}
